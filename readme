
NAME: RITHIN SURYA SAINADH GADAPA


PR0GRAMMING LANGUAGE USED: JAVA


1)The program will compute a route between the origin city and the destination city, and will print out both the length of the route and the list of all cities that lie on that route. For example,

find_route input1.txt Bremen Frankfurt

distance: 455 km
route: 
Bremen to Dortmund, 234 km 
Dortmund to Frankfurt, 221 km 
2)The program always finds a route between the origin and the destination, as long as such a route exists.
3)The program terminates and reports that no route can be found when indeed no route exists that connects source and destination
4)The program always returns optimal routes. In other words, no shorter route exists than the one reported by the program.
5)The algorithm is designed to find various routes between the source and destination and optimal route among them.

CODE STRUCTURE:

The package map contains 4 java files: map2.java,make.java, Milescomparator, getsucc.java

map2.java: It contains the main function and the functionality
make.java: to create the nodes we use this class
Milescomparator.java: To prioritize based on the pathcosts of the nodes in priority queue
getsucc.java: returns the hashmap like key:index of the arraylists and value the state node

The algorithms of treesearch and graph search with priority queue are strictly followed.


HOW TO RUN:
1) In the map package go to 'src' then 'map' folder.
2)compile all the files by using the command:: javac *.java
3)then Copy the "input.txt" file to src
4)execute the command:: (java map.map2 input.txt source destination) from the src folder
5)output as expected.


Refernces:(citations)
SIMILAR IMPLEMENTATION FOUND:
https://stackoverflow.com/questions/46132592/java-uniform-cost-search-implementation-with-txt-file-input
https://www.codeproject.com/Articles/203828/AI-Simple-Implementation-of-Uninformed-Search-Stra
